facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Plot DBP for each individual across all time points, grouped by treatment
ggplot(reshaped_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time for each individual
geom_point(size = 3) +  # Add points on the lines to highlight DBP values
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points by Treatment") +
facet_wrap(~ treatment, scales = "free_y") +  # Separate plots for each treatment
theme_minimal() +  # Minimal theme for clean appearance
theme(legend.position = "bottom")  # Position the legend at the bottom
# Assuming `reshaped_data` is the reshaped dataset containing the relevant variables
# Plot DBP and type_hypertension for each individual across all time points
ggplot(reshaped_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = type_hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP and Hypertension Stage for Each Individual Across Time Points") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Assuming `reshaped_data` is the reshaped dataset containing the relevant variables
# Plot DBP and type_hypertension for each individual across all time points
ggplot(reshaped_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
treatment_A_data <- reshaped_data %>% filter(treatment == "A")
# Plot for treatment A
plot_A <- ggplot(treatment_A_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment A)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Print plot for treatment A
print(plot_A)
# Filter the data for treatment B
treatment_B_data <- reshaped_data %>% filter(treatment == "B")
# Plot for treatment B
plot_B <- ggplot(treatment_B_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment B)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Print plot for treatment B
print(plot_B)
library(lattice)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshape_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshape_data$treatment, # Color lines by treatment group'
shape = hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
par.settings = list(superpose.line = list(col = c("blue", "red"))), # Define colors for the groups
strip = strip.custom(bg = "lightblue")
library(lattice)
library(lattice)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshape_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshape_data$treatment, # Color lines by treatment group'
shape = hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
library(lattice)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
pch = reshaped_data$hypertension_type,
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
pch = reshaped_data$hypertension,
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
install.packages("lattice")
library(lattice)
#Let us plot the average DBP at the 5 time points separately for treatment A and B and plot it against time.
mean_dbp <- reshaped_data %>%
group_by(num, treatment) %>%
summarise(meandbp = mean(dbp)) %>%
ungroup()
library(tidyverse)
library(readxl)
library(dplyr)
dia_bp_data <- read_csv("C:/Users/Ajinkyaa/OneDrive/Stata to R/New folder/My_First_Project/Dia_BP.csv", col_names = T)
head(dia_bp_data)
# Reshape the data
reshaped_data <- dia_bp_data %>%
pivot_longer(cols = starts_with("dbp"),
names_to = "time",
values_to = "dbp") %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_hypertension",
values_to = "hypertension") %>%
separate(time, into = c("type", "num"), sep = "_") %>%
separate(time_hypertension, into = c("type_hypertension", "num_hypertension"), sep = "_") %>%
filter(num == num_hypertension)
print(reshaped_data)
library(ggplot2)
# Filter the data for treatment A
treatment_A_data <- reshaped_data %>% filter(treatment == "A")
# Plot for treatment A
plot_A <- ggplot(treatment_A_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment A)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
print(plot_A)
# Filter the data for treatment B
treatment_B_data <- reshaped_data %>% filter(treatment == "B")
# Plot for treatment B
plot_B <- ggplot(treatment_B_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment B)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Print plot for treatment B
print(plot_B)
library(lattice)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
pch = reshaped_data$hypertension,
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
mean_dbp <- reshaped_data %>%
group_by(num, treatment) %>%
summarise(meandbp = mean(dbp)) %>%
ungroup()
ggplot(mean_dbp, aes(x = num, y = meandbp, color = treatment, group = treatment)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(x = "Time Point",
y = "Average Diastolic Blood Pressure",
color = "Treatment") +                 # Label the plot
theme_bw()
install.packages(plm)
library(plm)
library(plm)
# Load the necessary package
library(plm)
install.packages("plm")
library(plm)
# Fit the fixed effects model
m1.fe <- plm(dbp ~ num, data = reshaped_data, index = c("id", "num"),
model = "within")
summary(m1.fe)
library(tidyverse)
library(readxl)
library(dplyr)
dia_bp_data <- read_csv("C:/Users/Ajinkyaa/OneDrive/Stata to R/New folder/My_First_Project/Dia_BP.csv", col_names = T)
head(dia_bp_data)
# Reshape the data
reshaped_data <- dia_bp_data %>%
pivot_longer(cols = starts_with("dbp"),
names_to = "time",
values_to = "dbp") %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_hypertension",
values_to = "hypertension") %>%
separate(time, into = c("type", "num"), sep = "_") %>%
separate(time_hypertension, into = c("type_hypertension", "num_hypertension"), sep = "_") %>%
filter(num == num_hypertension)
library(ggplot2)
# Filter the data for treatment A
treatment_A_data <- reshaped_data %>% filter(treatment == "A")
# Plot for treatment A
plot_A <- ggplot(treatment_A_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment A)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Print plot for treatment A
print(plot_A)
# Filter the data for treatment B
treatment_B_data <- reshaped_data %>% filter(treatment == "B")
# Plot for treatment B
plot_B <- ggplot(treatment_B_data, aes(x = num, y = dbp, group = id, color = treatment)) +
geom_line() +  # Line plot to show DBP trend over time
geom_point(aes(shape = hypertension), size = 3) +  # Add points with different shapes for hypertension stages
labs(x = "Time Points", y = "DBP", title = "DBP for Each Individual Across Time Points (Treatment B)") +
facet_wrap(~ id, scales = "free_y") +  # Facet by individual (id)
theme_minimal() +  # Minimal theme for better appearance
theme(legend.position = "bottom")  # Position legend at the bottom
# Print plot for treatment B
print(plot_B)
library(lattice)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
pch = reshaped_data$hypertension,
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
xyplot(dbp ~ as.factor(num) | factor(id),
data = reshaped_data,
type = "o",
lwd = 1.5,
layout = c(10, 5),
xlab = "Time Points",
ylab = "Diastolic Blood Pressure",
groups = reshaped_data$treatment, # Color lines by treatment group'
shape = reshaped_data$hypertension,
auto.key = list(space = "right", title = "Treatment", lines = TRUE, points = FALSE),
par.settings = list(superpose.line = list(col = c("blue", "red"))) # Define colors for the groups
)
mean_dbp <- reshaped_data %>%
group_by(num, treatment) %>%
summarise(meandbp = mean(dbp)) %>%
ungroup()
ggplot(mean_dbp, aes(x = num, y = meandbp, color = treatment, group = treatment)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(x = "Time Point",
y = "Average Diastolic Blood Pressure",
color = "Treatment") +                 # Label the plot
theme_bw()
library(plm)
# Fit the fixed effects model
model1.fe <- plm(dbp ~ num+age+sex, data = reshaped_data, index = c("id", "num"),
model = "within")
summary(model1.fe)
# Load the necessary package
#install.packages("plm")
library(plm)
# Fit the fixed effects model
model1.fe <- plm(dbp ~ num, data = reshaped_data, index = c("id", "num"),
model = "within")
# Summarize the model
summary(model1.fe)
library(plm)
# Fit the fixed effects model
model1.fe <- plm(dbp ~ num, data = reshaped_data, index = c("id", "num"),
model = "within")
# Summarize the model
summary(model1.fe)
reshaped_data$treatment <- relevel(factor(reshaped_data$treatment), ref = "B")
#running the model with interaction term
model2.fe <- plm(dbp ~ time*treatment, data = reshaped_data, index = c("id", "time"),
model = "within")
reshaped_data$treatment <- relevel(factor(reshaped_data$treatment), ref = "B")
#running the model with interaction term
model2.fe <- plm(dbp ~ num*treatment, data = reshaped_data, index = c("id", "num"),
model = "within")
summary(model2.fe)
reshaped_data$treatment <- relevel(factor(reshaped_data$treatment), ref = "B")
#running the model with interaction term
model2.fe <- plm(dbp ~ num*treatment, data = reshaped_data, index = c("id", "num"),
model = "within")
summary(model2.fe)
model2.fe <- plm(dbp ~ num + age + sex, data = reshaped_data, index = c("id", "num"),
model = "within")
# Summarize the model
summary(model2.fe)
model2.fe <- plm(dbp ~ age + sex, data = reshaped_data, index = c("id", "num"),
model = "within")
model1.re <- plm(dbp ~ num + treatment, data = reshaped_data, index = c("id", "num"),
model = "random")
summary(model1.re)
model2.re <- plm(dbp ~ num*treatment, data = reshaped_data, index = c("id", "num"),
model = "random")
summary(model2.re)
model3.re <- plm(dbp ~ num*treatment + age + sex, data = reshaped_data, index = c("id", "num"),
model = "random")
summary(model3.re)
hausman_test <- phtest(model2.fe, model3.re)
print(hausman_test)
library(ggsankey)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("dplyr")
library(dplyr) # Also needed
library(reshape)
library(reshape2)
setwd("H:/Deckstop folder/sankeydiagram")
data1 <- read.csv("d.csv", header=TRUE, stringsAsFactors=FALSE)
df1 <- data1 %>%
make_long(IHDS1, IHDS2)
df1
View(data1)
View(data1)
View(dia_bp_data)
View(dia_bp_data)
df1 <- dia_bp_data %>%
make_long(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5)
df1
View(df1)
df1$node <- factor(df1$node, levels = c("Stage I", "Stage II", "Stage III"))
ggplot(df1, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node),
label = node)) +
geom_sankey(flow.alpha = 0.5, node.color = "white") +
#  geom_sankey_label(size = 3.5, color = 1, fill = "white") +
#  scale_fill_viridis_d() +
theme_sankey(base_size = 16) +
theme(legend.position = "none")
nodes <- dia_bp_data(name = c("Stage I", "Stage II", "Stage III",
paste("Num", 1:5)))
install.packages("ggalluvial")
library(dplyr)
library(ggplot2)
library(ggalluvial)
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
pivot_longer(cols = everything(), names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point, levels = c("hypertension_1", "hypertension_2", "hypertension_3", "hypertension_4", "hypertension_5")))
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = row_number(), fill = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count")
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point,
levels = c("hypertension_1", "hypertension_2",
"hypertension_3", "hypertension_4",
"hypertension_5")))
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = id, fill = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count")
# Prepare the data for the Sankey diagram
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point,
levels = c("time 1", "hypertension_2",
"hypertension_3", "hypertension_4",
"hypertension_5")))
# Plot Sankey diagram using ggalluvial
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = id, fill = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count")
# Prepare the data for the Sankey diagram
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point,
levels = c("hypertension_1", "hypertension_2",
"hypertension_3", "hypertension_4",
"hypertension_5")))
# Plot Sankey diagram using ggalluvial
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = id, fill = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count")
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point,
levels = c("hypertension_1", "hypertension_2",
"hypertension_3", "hypertension_4",
"hypertension_5")))
transition_counts <- sankey_data %>%
group_by(time_point, stage) %>%
summarise(count = n(), .groups = "drop")
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = id, fill = stage, label = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(count)), size = 3, color = "black") +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text.x = element_text(size = 12))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(ggalluvial)
# Prepare the data for the Sankey diagram
sankey_data <- dia_bp_data %>%
select(hypertension_1, hypertension_2, hypertension_3, hypertension_4, hypertension_5) %>%
mutate(id = row_number()) %>%
pivot_longer(cols = starts_with("hypertension"),
names_to = "time_point", values_to = "stage") %>%
mutate(time_point = factor(time_point,
levels = c("hypertension_1", "hypertension_2",
"hypertension_3", "hypertension_4",
"hypertension_5")))
# Add counts for clear flow
transition_counts <- sankey_data %>%
group_by(time_point, stage) %>%
summarise(count = n(), .groups = "drop")
# Plot Sankey diagram with numbers
ggplot(sankey_data, aes(x = time_point, stratum = stage, alluvium = id, fill = stage, label = stage)) +
geom_flow(stat = "alluvium", aes.bind = "alluvia") +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(count)), size = 3, color = "black") +
scale_fill_brewer(type = "qual", palette = "Set3") +
theme_minimal() +
labs(title = "Sankey Diagram of Hypertension Stages Over Time",
x = "Time Points",
y = "Count") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
axis.text.x = element_text(size = 12))
heart <- read_csv("C:/Users/Ajinkyaa/OneDrive/Stata to R/New folder/HEART DISEASE PREDICTION MODEL/heart.csv")
view(heart)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(cr,title = "correlogram",lab_col = "black",
lab = TRUE, legend.title = "Pearson Correlation",
lab_size = 3, ggtheme = theme_classic(),
outline.color = "black",
colors = c("orange", "green", "blue"))
install.packages("ggcorrplot")
